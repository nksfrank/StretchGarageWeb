#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StretchGarageWeb_db")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertParkedCar(ParkedCar instance);
    partial void UpdateParkedCar(ParkedCar instance);
    partial void DeleteParkedCar(ParkedCar instance);
    partial void InsertParkingPlace(ParkingPlace instance);
    partial void UpdateParkingPlace(ParkingPlace instance);
    partial void DeleteParkingPlace(ParkingPlace instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    #endregion
		
		public dbDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.StretchGarageWeb_dbConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ParkedCar> ParkedCars
		{
			get
			{
				return this.GetTable<ParkedCar>();
			}
		}
		
		public System.Data.Linq.Table<ParkingPlace> ParkingPlaces
		{
			get
			{
				return this.GetTable<ParkingPlace>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParkedCar")]
	public partial class ParkedCar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UnitId;
		
		private int _ParkingPlaceId;
		
		private System.DateTime _ParkingDate;
		
		private bool _IsParked;
		
		private EntityRef<ParkingPlace> _ParkingPlace;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUnitIdChanging(int value);
    partial void OnUnitIdChanged();
    partial void OnParkingPlaceIdChanging(int value);
    partial void OnParkingPlaceIdChanged();
    partial void OnParkingDateChanging(System.DateTime value);
    partial void OnParkingDateChanged();
    partial void OnIsParkedChanging(bool value);
    partial void OnIsParkedChanged();
    #endregion
		
		public ParkedCar()
		{
			this._ParkingPlace = default(EntityRef<ParkingPlace>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitId", DbType="Int NOT NULL")]
		public int UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParkingPlaceId", DbType="Int NOT NULL")]
		public int ParkingPlaceId
		{
			get
			{
				return this._ParkingPlaceId;
			}
			set
			{
				if ((this._ParkingPlaceId != value))
				{
					if (this._ParkingPlace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParkingPlaceIdChanging(value);
					this.SendPropertyChanging();
					this._ParkingPlaceId = value;
					this.SendPropertyChanged("ParkingPlaceId");
					this.OnParkingPlaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParkingDate", DbType="DateTime NOT NULL")]
		public System.DateTime ParkingDate
		{
			get
			{
				return this._ParkingDate;
			}
			set
			{
				if ((this._ParkingDate != value))
				{
					this.OnParkingDateChanging(value);
					this.SendPropertyChanging();
					this._ParkingDate = value;
					this.SendPropertyChanged("ParkingDate");
					this.OnParkingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsParked", DbType="Bit NOT NULL")]
		public bool IsParked
		{
			get
			{
				return this._IsParked;
			}
			set
			{
				if ((this._IsParked != value))
				{
					this.OnIsParkedChanging(value);
					this.SendPropertyChanging();
					this._IsParked = value;
					this.SendPropertyChanged("IsParked");
					this.OnIsParkedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ParkingPlace_ParkedCar", Storage="_ParkingPlace", ThisKey="ParkingPlaceId", OtherKey="Id", IsForeignKey=true)]
		public ParkingPlace ParkingPlace
		{
			get
			{
				return this._ParkingPlace.Entity;
			}
			set
			{
				ParkingPlace previousValue = this._ParkingPlace.Entity;
				if (((previousValue != value) 
							|| (this._ParkingPlace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParkingPlace.Entity = null;
						previousValue.ParkedCars.Remove(this);
					}
					this._ParkingPlace.Entity = value;
					if ((value != null))
					{
						value.ParkedCars.Add(this);
						this._ParkingPlaceId = value.Id;
					}
					else
					{
						this._ParkingPlaceId = default(int);
					}
					this.SendPropertyChanged("ParkingPlace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_ParkedCar", Storage="_Unit", ThisKey="UnitId", OtherKey="Id", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.ParkedCars.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.ParkedCars.Add(this);
						this._UnitId = value.Id;
					}
					else
					{
						this._UnitId = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParkingPlace")]
	public partial class ParkingPlace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _ParkingSpots;
		
		private decimal _Lat;
		
		private decimal _Long;
		
		private int _Size;
		
		private EntitySet<ParkedCar> _ParkedCars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParkingSpotsChanging(int value);
    partial void OnParkingSpotsChanged();
    partial void OnLatChanging(decimal value);
    partial void OnLatChanged();
    partial void OnLongChanging(decimal value);
    partial void OnLongChanged();
    partial void OnSizeChanging(int value);
    partial void OnSizeChanged();
    #endregion
		
		public ParkingPlace()
		{
			this._ParkedCars = new EntitySet<ParkedCar>(new Action<ParkedCar>(this.attach_ParkedCars), new Action<ParkedCar>(this.detach_ParkedCars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParkingSpots", DbType="Int NOT NULL")]
		public int ParkingSpots
		{
			get
			{
				return this._ParkingSpots;
			}
			set
			{
				if ((this._ParkingSpots != value))
				{
					this.OnParkingSpotsChanging(value);
					this.SendPropertyChanging();
					this._ParkingSpots = value;
					this.SendPropertyChanged("ParkingSpots");
					this.OnParkingSpotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Decimal(11,8) NOT NULL")]
		public decimal Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Long", DbType="Decimal(11,8) NOT NULL")]
		public decimal Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int NOT NULL")]
		public int Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ParkingPlace_ParkedCar", Storage="_ParkedCars", ThisKey="Id", OtherKey="ParkingPlaceId")]
		public EntitySet<ParkedCar> ParkedCars
		{
			get
			{
				return this._ParkedCars;
			}
			set
			{
				this._ParkedCars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParkedCars(ParkedCar entity)
		{
			this.SendPropertyChanging();
			entity.ParkingPlace = this;
		}
		
		private void detach_ParkedCars(ParkedCar entity)
		{
			this.SendPropertyChanging();
			entity.ParkingPlace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unit")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Type;
		
		private System.Nullable<System.DateTime> _EnteredZone;
		
		private EntitySet<ParkedCar> _ParkedCars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnEnteredZoneChanging(System.Nullable<System.DateTime> value);
    partial void OnEnteredZoneChanged();
    #endregion
		
		public Unit()
		{
			this._ParkedCars = new EntitySet<ParkedCar>(new Action<ParkedCar>(this.attach_ParkedCars), new Action<ParkedCar>(this.detach_ParkedCars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnteredZone", DbType="DateTime")]
		public System.Nullable<System.DateTime> EnteredZone
		{
			get
			{
				return this._EnteredZone;
			}
			set
			{
				if ((this._EnteredZone != value))
				{
					this.OnEnteredZoneChanging(value);
					this.SendPropertyChanging();
					this._EnteredZone = value;
					this.SendPropertyChanged("EnteredZone");
					this.OnEnteredZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_ParkedCar", Storage="_ParkedCars", ThisKey="Id", OtherKey="UnitId")]
		public EntitySet<ParkedCar> ParkedCars
		{
			get
			{
				return this._ParkedCars;
			}
			set
			{
				this._ParkedCars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParkedCars(ParkedCar entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_ParkedCars(ParkedCar entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
}
#pragma warning restore 1591
